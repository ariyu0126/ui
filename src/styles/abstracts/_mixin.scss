@use 'sass:map';
@use './variables' as *;
@use './media' as m;

/* media query */
@mixin MO {
  @include m.respond-to('MO') {
    @content;
  }
}
@mixin TAB {
  @include m.respond-to('TAB') {
    @content;
  }
}
@mixin PC {
  @include m.respond-to('PC') {
    @content;
  }
}

/* font style */
@mixin font-style($type, $weight: null) {
  @if $type == 'default' {
    font-size: var(--font-size-base);
    line-height: var(--line-height-base);
    font-weight: if($weight != null, $weight, 400);
  } @else if $type == 'heading1' {
    font-size: var(--font-size-heading1); // 36px
    line-height: var(--line-height-heading1);
    font-weight: if($weight != null, $weight, 700);
  } @else if $type == 'heading2' {
    font-size: var(--font-size-heading2); // 28px
    line-height: var(--line-height-heading2);
    font-weight: if($weight != null, $weight, 400);
  } @else if $type == 'heading3' {
    font-size: var(--font-size-heading3); // 24px
    line-height: var(--line-height-heading3);
    font-weight: if($weight != null, $weight, 400);
  } @else if $type == 'heading4' {
    font-size: var(--font-size-heading4); // 20px
    line-height: var(--line-height-heading4);
    font-weight: if($weight != null, $weight, 400);
  } @else if $type == 'heading5' {
    font-size: var(--font-size-heading5); // 18px
    line-height: var(--line-height-heading5);
    font-weight: if($weight != null, $weight, 400);
  } @else if $type == 'small' {
    font-size: var(--font-size-small); // 14px
    line-height: var(--line-height-small);
    font-weight: if($weight != null, $weight, 400);
  } @else if $type == 'xsmall' {
    font-size: var(--font-size-xsmall); // 12px
    line-height: var(--line-height-xsmall);
    font-weight: if($weight != null, $weight, 400);
  }
}

/* ellipsis */
@mixin ellipsis($lines) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
}

/* flex */
@mixin flex($flex: flex, $direction: row, $justify: flex-start, $align: center, $gap: md, $wrap: nowrap) {
  display: $flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  gap: map.get($gap-map, $gap);
  flex-wrap: $wrap;
}

/* height + font (container) or min-height only (item) */
@mixin control-size($size, $target: 'container') {
  $props: map.get($height-sizes, $size);
  @include font-style(map.get($props, font));
  @if $props == null {
    @warn 'Unknown size: '#{$size};
  } @else if $target == 'container' {
    height: map.get($props, height);
  } @else if $target == 'item' {
    min-height: map.get($props, minHeight);
  }
}

/* radio  - theme */
@mixin radio-input-theme($name, $bg, $border:none, $innerColor) {
  .radio__custom {
    background: $bg;
    border: $border;
    &:after {
      background-color: $innerColor;
    }
  }
}
@mixin radio-button-theme($name, $borderColor, $bgChecked, $textChecked) {
  &.radio__group-color-#{$name} {
    border-color: #{$borderColor};

    .input__radio {
      border-color: #{$borderColor};

      &:has(input[type='radio']:checked) {
        background: #{$bgChecked};
        color: #{$textChecked};
      }
    }
  }
}

/* radio - size */
@mixin radio-input-size {
  @each $size, $props in $radio-sizes {
    &.size--#{$size} {
      @include font-style(map.get($props, font));
      .radio__custom {
        width: map.get($props, outer);
        height: map.get($props, outer);
        &:after {
          width: map.get($props, inner);
          height: map.get($props, inner);
        }
      }
    }
  }
}


// _mixin.scss
@mixin checkbox-style($size) {
  $props: map.get($checkbox-sizes, $size);
  @include font-style(map.get($props, font));

  .checkbox__custom {
    margin-right: 0.5rem;

    width: map.get($props, width);
    height: map.get($props, width);
    margin-right: 0.5rem;
    border: 1px solid var(--color-gray-600);
    border-radius: var(--border-radius-xs);
    position:relative;
    cursor: pointer;
    transition: background-color 0.3s, border-color 0.3s;
  
    &:after {
      content: '';
      width: map.get($props, checkWidth);
      height: map.get($props, checkHeight);
      margin-top: map.get($props, margin);
      display: block;
      border: solid var(--color-gray-600);
      border-width:0 map.get($props, borderWidth) map.get($props, borderWidth) 0;
      position:absolute;
      top:50%;
      left:50%;
      transform:translate(-50%, -50%) scale(0) rotate(45deg);
      transition:transform 0.3s;
    }
  }
}

@mixin checkbox-theme($name, $bg, $checkColor) {
  .checkbox__custom {
    background: $bg;
    border:none;
    &:after {
      border-color: $checkColor;
    }
  }
}

@mixin checkbox-button-theme($name, $borderColor, $bgChecked, $textChecked) {
  &.checkbox__group-color-#{$name} {
    .input__checkbox {
      border-color: $borderColor;
      &:has(input[type="checkbox"]:checked) {
        background: $bgChecked;
        color: $textChecked;
      }
    }
  }
}

@mixin pretty-scrollbar($size: 8px, $thumb: rgba(0,0,0,.3), $track: transparent) {
  scrollbar-width: thin;
  scrollbar-color: #{$thumb} #{$track};

  &::-webkit-scrollbar { width: $size; height: $size; }
  &::-webkit-scrollbar-thumb {
    background: $thumb;
    border-radius: 999px;
    border: 2px solid rgba(0,0,0,0);
    background-clip: padding-box;
    min-height: 24px;
  }
  &::-webkit-scrollbar-track {
    background: $track;
    border-radius: 999px;
  }
  &::-webkit-scrollbar-button { display: none; }
}